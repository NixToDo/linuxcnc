[[cha:oshwdrv-drivers]]

= OsHwDrv Drivers

This driver is for the OpenSourceHardWareDrive. It based on an FPGA
connected to LinuxCNC by parallel port (in EPP mode). All time critical
tasks are done by the FPGA. The PC only needs the servo thread.
The hole hardware (schematics, PCB layout), the programming code
of the FPGA and the LinuxCNC drivers are all open source. (For license 
details check the hardware documents.)

All this data is hosted at: http://www.github.com/nixtodo/oshwdrv

The overall function is to remove the limits of the software step generation.
So LinuxCNC will read all inputs at the beginnung of each servo cycle,
process the data (PID, ...) and then write back all new data to the board.
An typical installation has 16 digital inputs (opto isolated), 8 digital
outputs (open collector), 4 incemental encoder inputs (A, B and Index),
4 step generators with step and direction pins.
The board (PCB) has additional circuits for two 0 - 10 V outputs and two
analog inputs (12 Bit, 0 - 5 V). Unused pins of the FPGA are connected to
a connector.

Installing:
----
loadrt hal_oshwdrv port_addr=<addr1>[,<addr2>[,<addr3>]] [epp_dir=<1 | 0>]
----

The 'port_addr' parameter tells the driver what parallel port(s) to 
check. By default, '<addr1>' is 0x0378, and '<addr2>' and following 
are not used. The driver searches the entire address 
space of the enhanced parallel port(s) at 'port_addr', looking for 
any board(s). It then exports HAL pins for whatever it finds.
During loading (or attempted loading) the driver prints some useful
debugging messages to the kernel log, which can be viewed with 'dmesg'. 

Up to 3 parport busses may be used, and each bus may have up to 8 devices on it.

== Command Line Options

There is an option that can be specified on the loadrt command line.

It was recently discovered that some parallel port chips would not work with the driver.
Especially, the Oxford OXPCIe952 chip on the SIIG PCIe parallel port cards had this trouble.
The driver in all LinuxCNC versions starting from 2.7.8 have been corrected for this problem by default.
However, this possibly could cause problems with really old EPP parallel port hardware,
so there is a command line option to go back to the previous behavior.
The new behavior is set by default, or by adding the parameter epp_dir=0 on the command line.
To get the old behavior, add epp_dir=1 to the command line. It is possible to give a list,
like epp_dir=1,0,1 to set different settings for each of up to 3 parallel ports.

== Pins

In the following pins, parameters, and functions, <port> is the parallel
port ID. According to the naming conventions the first port should always
have an ID of zero. 
The driver enumerates the boards and exports the appropriate HAL pins.
For instance, the encoders will be enumerated from zero up, in the
same order as the address switches on the board specify.  So, the first
board will have encoders 0 -- 3, the second board would have encoders 4 -- 7.

* '(s32 output) oshwdrv.<port>.encoder.<channel>.count' -
   Encoder position, in counts.
* '(s32 output) oshwdrv.<port>.encoder.<channel>.delta' -
   Change in counts since last read, in raw encoder count units.
* '(float output) 'oshwdrv.<port>.encoder.<channel>.velocity'  -
   Velocity scaled in user units per second. On oshwdrv this is derived from raw
   encoder counts per servo period, and hence is affected by encoder granularity.
* '(float output) oshwdrv.<port>.encoder.<channel>.position' -
   Encoder position, in user units.
* '(bit bidir) oshwdrv.<port>.encoder.<channel>.index-enable'  -
   Connect to joint.#.index-enable for home-to-index. This is a
   bidirectional HAL signal. Setting it to true causes the encoder
   hardware to reset the count to zero on the next encoder index pulse.
   The driver will detect this and set the signal back to false.
   Also connect this signal to pid.#.index-enable to prevent an spike at PID output
   in the moment the counter resets.

* '(float input) oshwdrv.<port>.stepgen.<channel>.velocity'  -
   Value which determines the step frequency. The value is multiplied
   by 'stepgen.<channel>.scale' , and the result is the frequency in
   steps per second. Negative values result in the frequency being based
   on the absolute value, and the direction pin is set to indicate negative.
* '(bit output) oshwdrv.<port>.din.<channel>.in' - State of digital
   input pin, see canonical digital input.
* '(bit output) oshwdrv.<port>.din.<channel>.in-not' - Inverted
   state of digital input pin, see canonical digital input.
* '(bit input) oshwdrv.<port>.dout.<channel>.out'  - Value to be
   written to digital output, see canonical digital output. 
* '(Option bit input) oshwdrv.<port>.dout.<channel>.out'  - Value to be
   written to one of the 8 extra digital output pins on

== Parameters

* '(float) oshwdrv.<port>.encoder.<channel>.scale' -
   The number of counts / user unit (to convert from counts to units).
* '(u32) oshwdrv.<port>.stepgen.<channel-range>.setup-time' -
   Sets minimum time between direction change and step pulse, in
   units of 100ns. Applies to a group of four consecutive step generators,
   as indicated by '<channel-range>'. Values between 100 ns and 25.5 us
   can be specified.
* '(u32) oshwdrv.<port>.stepgen.<channel-range>.pulse-width' -
   Sets width of step pulses, in units of 100ns. Applies to a group
   of four consecutive step generators, as indicated by '<channel-range>'.
   Values between 100 ns and 25.5 us may be specified.
* '(u32) oshwdrv.<port>.stepgen.<channel-range>.pulse-space-min' -
   Sets minimum time between pulses, in units of 100ns. 
   Applies to a group of four consecutive step generators, as indicated by
   '<channel-range>'. Values between 100 ns and 25.5 us can be specified.
* '(float) oshwdrv.<port>.stepgen.<channel>.scale' -
   Scaling for step pulse generator. The step frequency in Hz is the
   absolute value of 'velocity' * 'scale'.
* '(float) oshwdrv.<port>.stepgen.<channel>.max-vel' -
   The maximum value for 'velocity'. Commands greater than 'max-vel'
   will be clamped. Also applies to negative values. (The absolute value is clamped.)
* '(float) oshwdrv.<port>.stepgen.<channel>.frequency' -
   Actual step pulse frequency in Hz (used mostly for troubleshooting.)
* '(bit) oshwdrv.<port>.dout.<channel>.invert' -
   Inverts a digital output, see canonical digital output.

== Functions

* '(funct) oshwdrv.<port>.read' -
   Reads all inputs (digital inputs and encoder counters) on one port.
   These reads are organized into blocks of contiguous registers to be
   read in a block to minimize CPU overhead. 
* '(funct) oshwdrv.<port>.write' -
   Writes all outputs (digital outputs, stepgens, PWMs) on one port. 
   These writes are organized into blocks of contiguous registers to be
   written in a block to minimize CPU overhead. 
